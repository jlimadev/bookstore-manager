buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:10.0.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.3"
    }
}

plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "1.0.11.RELEASE"
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.jpa" version "$kotlinVersion"
    id 'jacoco'
    id "org.barfuin.gradle.jacocolog" version "1.2.4"
    id "org.jlleitschuh.gradle.ktlint" version "10.0.0"
    id "org.sonarqube" version "3.3"
    id "org.jetbrains.kotlin.kapt" version "1.5.20"
}

repositories {
    mavenCentral()
}

apply plugin: 'kotlin'
apply plugin: "kotlin-spring"
apply plugin: "kotlin-jpa"
apply plugin: 'jacoco'
apply plugin: 'org.barfuin.gradle.jacocolog'
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "org.jlleitschuh.gradle.ktlint-idea"
apply plugin: "org.sonarqube"
apply plugin: 'kotlin-kapt'


group = "com.jlima"
version = "1.0.0"
java.sourceCompatibility = JavaVersion.VERSION_11

dependencies {
    implementation("org.springframework.boot:spring-boot-devtools")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    implementation("io.springfox:springfox-boot-starter:${springfoxVersion}")
    implementation("org.springdoc:springdoc-openapi-ui:${springdocVersion}")
    implementation("org.springdoc:springdoc-openapi-kotlin:${springdocVersion}")

    implementation("org.liquibase:liquibase-core:4.4.0")
    runtimeOnly("com.h2database:h2:1.4.200")
    runtimeOnly("org.postgresql:postgresql:42.2.22")

    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    implementation("org.mapstruct:mapstruct:1.4.2.Final")
    kapt("org.mapstruct:mapstruct-processor:1.4.2.Final")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.mockito:mockito-core:3.10.0")
    testImplementation("org.mockito.kotlin:mockito-kotlin:3.2.0")
    testImplementation "org.mockito:mockito-inline:2.7.21"
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}

test {
    useJUnitPlatform()
    // report is always generated after tests run
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.7"
}

def packagesToExcludeOnCoverage = [
        '**/com/jlima/bookstoremanager/BookstoreManagerApplicationKt*.*',
        '**/com/jlima/bookstoremanager/config/**',
        '**/com/jlima/bookstoremanager/**/exception/**',
        '**/com/jlima/bookstoremanager/**/entity/**',
        '**/com/jlima/bookstoremanager/**/dto/**',
        '**/com/jlima/bookstoremanager/**/repository/**'
]

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: packagesToExcludeOnCoverage)
        }))
    }

    doLast {
        println("See report file:\\${project.rootDir}/build/reports/jacoco/test/html/index.html")
    }

    // tests are required to run before generating the report
    dependsOn test
}

// add to /actuator/info information about the app
springBoot {
    buildInfo()
}

// renames the generated jar file
tasks {
    bootJar {
        archiveFileName.set("bookstore-manager.jar")
    }
}

ktlint {
    version = "0.40.0"
}

sonarqube {
    properties {
        property "sonar.projectName", "Bookstore Manager"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "jlima"
        property "sonar.projectKey", "jlimadev_bookstore-manager"
        property "sonar.coverage.exclusions", packagesToExcludeOnCoverage
    }
}